{
	"name": "df_transform_sseApi_response",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dataLakeV2_sseTurbines_mergedFiles",
						"type": "DatasetReference"
					},
					"name": "rawMergedFile"
				}
			],
			"sinks": [],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          result as ({93899031144A000} as (points as (ActivePower as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string), RotorSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as double, t_local as string), WindSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as double, t_local as string))), {93898BB7804A000} as (points as (ActivePower as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string), RotorSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string), WindSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as double, t_local as string))), {95A5BB5FA44A000} as (points as (ActivePower as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string), RotorSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string), WindSpeed as (pointName as string, objectId as string, t as integer, q as integer, v as integer, t_local as string)))),",
				"          replyInfo as (rcvTime as integer, replyTime as integer)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> rawMergedFile"
			]
		}
	}
}