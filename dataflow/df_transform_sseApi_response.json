{
	"name": "df_transform_sseApi_response",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dataLakeV2_sseTurbines_mergedFiles",
						"type": "DatasetReference"
					},
					"name": "rawMergedFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dataLakeV2_sseTurbines_transformedData",
						"type": "DatasetReference"
					},
					"name": "transformedFile",
					"rejectedDataLinkedService": {
						"referenceName": "ls_dataLakeV2_sseTurbines",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          Latitude as double,",
				"          Location as string,",
				"          Longitude as double,",
				"          ObjectName as string,",
				"          result as (points as (ActivePower as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as short), {CALC-ActivePower} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), {CALC-ExternalCurtailmentFlag} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as boolean), {IEC-OperationState} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as short), {PI-CapacityFactor} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), {PI-ProducedMWh} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), RotorSpeed as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), WindSpeed as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double)))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('hash', 1)) ~> rawMergedFile",
				"rawMergedFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          result as (ObjectId as string, ObjectName as string, ActivePower as integer, RotorSpeed as integer, WindSpeed as double, Latitude as string, Longitude as string)",
				"     ),",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ObjectId = result.points.ActivePower.objectId,",
				"          ObjectName,",
				"          ActivePower = result.points.ActivePower.v,",
				"          RotorSpeed = result.points.RotorSpeed.v,",
				"          WindSpeed = result.points.WindSpeed.v,",
				"          {IEC-OperationState} = result.points.{IEC-OperationState}.v,",
				"          {CALC-ActivePower} = result.points.{CALC-ActivePower}.v,",
				"          {PI-ProducedMWh} = result.points.{PI-ProducedMWh}.v,",
				"          {PI-CapacityFactor} = result.points.{PI-CapacityFactor}.v,",
				"          {CALC-ExternalCurtailmentFlag} = result.points.{CALC-ExternalCurtailmentFlag}.v,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     )) ~> transformedFile"
			]
		}
	}
}