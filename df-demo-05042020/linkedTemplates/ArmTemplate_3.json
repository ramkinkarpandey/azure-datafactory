{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-demo-05042020"
		},
		"file_created_event_properties_tjx_technology_demo_parameters_triggeringFileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"file_created_event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/fdf62bd8-f3c4-4a64-8226-d793b7659d78/resourceGroups/rg-datafactory/providers/Microsoft.Storage/storageAccounts/datalakesv2storage"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/UntilSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until False",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('KeepRunning'), bool('false'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Call Foreach",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "For-Each-Sample",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"lastRunValue": {
												"value": "@variables('LastRunValue')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set KeepRunning",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Call Foreach",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "KeepRunning",
										"value": {
											"value": "@bool(activity('Call Foreach').output.pipelineReturnValue.KeepRunning)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set LastRunValue",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set KeepRunning",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "LastRunValue",
										"value": {
											"value": "@add(variables('Count'), 6)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set LastRunValue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count",
										"value": {
											"value": "@variables('LastRunValue')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"KeepRunning": {
						"type": "Boolean",
						"defaultValue": true
					},
					"LastRunValue": {
						"type": "Integer",
						"defaultValue": 0
					},
					"Count": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-data-based-on-condition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look For Updated Rows",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT Id, Name, DepartmentId FROM EMPLOYEE WHERE DEPARTMENTID = @{pipeline().parameters.departmentid}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Employee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Filtered Data To Destination",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Look For Updated Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM EMPLOYEE WHERE DEPARTMENTID = @{pipeline().parameters.departmentid}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_filtered_employee",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "Employee.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"departmentid": {
						"type": "int",
						"defaultValue": 3
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sse-main-foreach-location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup List Of Turbines",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "@concat('PartitionKey eq ', '''',pipeline().parameters.Location,'''')",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "ds_azureTable_sseStorage",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "turbines"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Turbine At One Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup List Of Turbines",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set points",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup List Of Turbines').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Set turbine",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "turbine",
										"value": {
											"value": "@concat('&ObjectIds=',item().RowKey)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data from API Call to Storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set turbine",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "ObjectName",
													"value": {
														"value": "@item().RowKey",
														"type": "Expression"
													}
												},
												{
													"name": "Latitude",
													"value": {
														"value": "@item().Latitude",
														"type": "Expression"
													}
												},
												{
													"name": "Longitude",
													"value": {
														"value": "@item().Longitude",
														"type": "Expression"
													}
												},
												{
													"name": "Location",
													"value": {
														"value": "@pipeline().parameters.Location",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Rest_sseBazeFieldApi",
											"type": "DatasetReference",
											"parameters": {
												"objectIds": {
													"value": "@variables('turbine')",
													"type": "Expression"
												},
												"points": {
													"value": "@variables('points')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_dataLakeV2_sseTurbines",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "rawFiles",
												"fileName": {
													"value": "@concat(guid(),'.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set points",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "points",
							"value": {
								"value": "@concat('&Points=ActivePower','&Points=RotorSpeed', '&Points=WindSpeed','&Points=CALC-TheoreticalProduction','&Points=IEC-OperationState','&Points=CALC-ActivePower','&Points=PI-ProducedMWh','&Points=DailyBudget','&Points=PI-CapacityFactor','&Points=CALC-ExternalCurtailmentFlag')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Location": {
						"type": "string"
					}
				},
				"variables": {
					"turbine": {
						"type": "String"
					},
					"points": {
						"type": "String"
					},
					"tempTurbine": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sse-main-push-transformed-data-to-azureTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to AzureTable for Serving",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "transformedFiles",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureTableSink",
								"azureTableInsertType": "merge",
								"azureTablePartitionKeyName": "Location",
								"azureTableRowKeyName": "ObjectName",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['ObjectId']"
										},
										"sink": {
											"name": "ObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ObjectName']"
										},
										"sink": {
											"name": "ObjectName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['ActivePower']"
										},
										"sink": {
											"name": "ActivePower",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['RotorSpeed']"
										},
										"sink": {
											"name": "RotorSpeed",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['WindSpeed']"
										},
										"sink": {
											"name": "WindSpeed",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['IEC-OperationState']"
										},
										"sink": {
											"name": "IEC_OperationState",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['CALC-ActivePower']"
										},
										"sink": {
											"name": "CALC_ActivePower",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['PI-ProducedMWh']"
										},
										"sink": {
											"name": "PI_ProducedMWh",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['PI-CapacityFactor']"
										},
										"sink": {
											"name": "PI_CapacityFactor",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['CALC-ExternalCurtailmentFlag']"
										},
										"sink": {
											"name": "CALC_ExternalCurtailmentFlag",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"path": "$['Latitude']"
										},
										"sink": {
											"name": "Latitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['Longitude']"
										},
										"sink": {
											"name": "Longitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['Location']"
										},
										"sink": {
											"name": "Location"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dataLakeV2_transformedFileV2",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "transformedFiles",
									"fileName": "*.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azureTable_sseStorage",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "aggregatedData"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewYorkTaxiDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine_SqlServer_Parameterised",
					"type": "LinkedServiceReference",
					"parameters": {
						"dataBaseName": "NewYorkTaxi"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Schedule"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrganisationDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine_OrnaginsationDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "DepartmentId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataSet_FileSystem_AvanadeMachine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachineFileSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataSet_SQLServer_AvanadeMachine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_created_event')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline is execute as new file arrives at source.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "tjx_technology_demo",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggeringFileName": "[parameters('file_created_event_properties_tjx_technology_demo_parameters_triggeringFileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/tjx/blobs/sales/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('file_created_event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDepartmentAggregation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_AzureSql_DfDemoDatabase_Employee",
								"type": "DatasetReference"
							},
							"name": "Employee",
							"description": "Employee Dataset"
						},
						{
							"dataset": {
								"referenceName": "ds_AzureSql_DfDemoDatabase_Department",
								"type": "DatasetReference"
							},
							"name": "Department",
							"description": "Department Dataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Datalake_Json_EmployeeDepartment",
								"type": "DatasetReference"
							},
							"name": "SaveEmployeeDepartmentAggregation",
							"description": "Save Employee Department Aggregation"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinEmployeeDepartment",
							"description": "Inner Join Employee Department on DepartmentId"
						},
						{
							"name": "AverageSalaryGroupByDepartment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Name as string,",
						"          DepartmentId as integer,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Employee",
						"source(output(",
						"          Id as integer,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Department",
						"Employee, Department join(DepartmentId == Department@Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoinEmployeeDepartment",
						"InnerJoinEmployeeDepartment aggregate(groupBy({Department Name} = Department@Name),",
						"     {Average Salary} = avg(Salary)) ~> AverageSalaryGroupByDepartment",
						"AverageSalaryGroupByDepartment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     mapColumn(",
						"          {Department Name},",
						"          {Average Salary}",
						"     ),",
						"     partitionBy('hash', 1)) ~> SaveEmployeeDepartmentAggregation"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDepartmentJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_AzureSql_DfDemoDatabase_Employee",
								"type": "DatasetReference"
							},
							"name": "Employee",
							"description": "Employee Dataset"
						},
						{
							"dataset": {
								"referenceName": "ds_AzureSql_DfDemoDatabase_Department",
								"type": "DatasetReference"
							},
							"name": "Department",
							"description": "Department Dataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Datalake_Json_EmployeeDepartment",
								"type": "DatasetReference"
							},
							"name": "EmployeeDepartmentJoinData"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinEmployeeDepartment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Name as string,",
						"          DepartmentId as integer,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Employee",
						"source(output(",
						"          Id as integer,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Department",
						"Employee, Department join(DepartmentId == Department@Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoinEmployeeDepartment",
						"InnerJoinEmployeeDepartment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     mapColumn(",
						"          {Employee Id} = Employee@Id,",
						"          {Employee Name} = Employee@Name,",
						"          Department = Department@Name",
						"     )) ~> EmployeeDepartmentJoinData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_sseApi_response')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dataLakeV2_sseTurbines_mergedFiles",
								"type": "DatasetReference"
							},
							"name": "rawMergedFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dataLakeV2_sseTurbines_transformedData",
								"type": "DatasetReference"
							},
							"name": "transformedFile",
							"rejectedDataLinkedService": {
								"referenceName": "ls_dataLakeV2_sseTurbines",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Latitude as double,",
						"          Location as string,",
						"          Longitude as double,",
						"          ObjectName as string,",
						"          result as (points as (ActivePower as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as short), {CALC-ActivePower} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), {CALC-ExternalCurtailmentFlag} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as boolean), {CALC-TheoreticalProduction} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), {IEC-OperationState} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as short), {PI-CapacityFactor} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), {PI-ProducedMWh} as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), RotorSpeed as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double), WindSpeed as (objectId as string, pointName as string, q as integer, t as long, t_local as string, v as double)))",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     partitionBy('hash', 1)) ~> rawMergedFile",
						"rawMergedFile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          result as (ObjectId as string, ObjectName as string, ActivePower as integer, RotorSpeed as integer, WindSpeed as double, Latitude as string, Longitude as string)",
						"     ),",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ObjectId = result.points.{CALC-ActivePower}.objectId,",
						"          ObjectName,",
						"          ActivePower = result.points.ActivePower.v,",
						"          RotorSpeed = result.points.RotorSpeed.v,",
						"          WindSpeed = result.points.WindSpeed.v,",
						"          {IEC-OperationState} = result.points.{IEC-OperationState}.v,",
						"          {CALC-ActivePower} = result.points.{CALC-ActivePower}.v,",
						"          {PI-ProducedMWh} = result.points.{PI-ProducedMWh}.v,",
						"          {PI-CapacityFactor} = result.points.{PI-CapacityFactor}.v,",
						"          {CALC-ExternalCurtailmentFlag} = result.points.{CALC-ExternalCurtailmentFlag}.v,",
						"          Latitude,",
						"          Longitude,",
						"          Location",
						"     )) ~> transformedFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CallingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call CalledPipline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CalledPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceDatabase": "dfdemodatabase",
								"SourceTable": "EmployeeV2",
								"FileName": "Employee.csv"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDepartmentAggregationFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Employee Department Aggregation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeeDepartmentAggregation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Department": {},
									"SaveEmployeeDepartmentAggregation": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeeDepartmentAggregation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDepartmentJoinFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Employee And Company",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeeDepartmentJoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Department": {},
									"EmployeeDepartmentJoinData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeeDepartmentJoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/From-Local-AW-Product-To-DataLakeV2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Local-AW-Product-To-DataLakeV2-CSV",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *  FROM [Production].[Product]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"maxConcurrentConnections": 4
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataSet_SQLServer_AvanadeMachine",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataSet_AzureDataLakesV2_CSV",
								"type": "DatasetReference",
								"parameters": {
									"products_filename": "products-@{utcnow()}.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataSet_SQLServer_AvanadeMachine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/From-Local-FileSystem-To-Azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_MetaData_From_LocalFileSystem",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataSet_FileSystem_AvanadeMachine",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_MetaData_From_LocalFileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_MetaData_From_LocalFileSystem').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataSet_FileSystem_AvanadeMachine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/from-local-sql-to-azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-data-to-azure-sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get-last-synched-iid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM dbo.EMPLOYEE\nWHERE Id > @{activity('get-last-synched-iid').output.firstrow.Id}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrganisationDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_sql_organisation_db_employee_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "get-last-synched-iid",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT IsNull(Max(Id),0) AS 'Id' FROM dbo.Employee",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azure_sql_organisation_db_employee_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-12T21:50:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrganisationDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master-run-newyorktaxi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Schedule",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT Year, Month FROM dbo.Schedule",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NewYorkTaxiDb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each YearMonth",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Schedule",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Schedule').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Execute Notebook Processing Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "run-newyorktaxi-notebooks-in-databricks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"month": {
												"value": "@item().Month",
												"type": "Expression"
											},
											"year": {
												"value": "@item().Year",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NewYorkTaxiDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sse-main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Delete files which are copid to archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Locations",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute sse-main-foreach-location",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "sse-main-foreach-location",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Location": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Merge all Newly Created Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set transformedFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Location']"
										},
										"sink": {
											"path": "$['Location']"
										}
									},
									{
										"source": {
											"path": "$['ObjectName']"
										},
										"sink": {
											"path": "$['ObjectName']"
										}
									},
									{
										"source": {
											"path": "$['Latitude']"
										},
										"sink": {
											"path": "$['Latitude']"
										}
									},
									{
										"source": {
											"path": "$['Longitude']"
										},
										"sink": {
											"path": "$['Longitude']"
										}
									},
									{
										"source": {
											"path": "$['result']..['points']"
										},
										"sink": {
											"path": "$['result']['points']"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "ds_dataLakeV2_sseTurbines",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "rawFiles",
									"fileName": "\\"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dataLakeV2_sseTurbines",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "mergedFiles",
									"fileName": "mergedFile.json"
								}
							}
						]
					},
					{
						"name": "Transform Files",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Merge all Newly Created Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_sseApi_response",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"rawMergedFile": {},
									"transformedFile": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set transformedFileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "transformedFileName",
							"value": {
								"value": "@concat(guid(),'.json')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute sse-main-push-transformed-data-to-azureTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "sse-main-push-transformed-data-to-azureTable",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy existing files to Archive folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "rawFiles",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_dataLakeV2_sseTurbines",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "rawFiles",
									"fileName": "*.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dataLakeV2_sseTurbines",
								"type": "DatasetReference",
								"parameters": {
									"folderName": {
										"value": "@concat('archive\\',utcnow())",
										"type": "Expression"
									},
									"fileName": "\\"
								}
							}
						]
					},
					{
						"name": "Delete files which are copid to archive",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy existing files to Archive folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_dataLakeV2_sseTurbines",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "rawFiles",
									"fileName": "*.json"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Locations": {
						"type": "array",
						"defaultValue": [
							"GRIF",
							"ARTF",
							"DROM"
						]
					}
				},
				"variables": {
					"turbine": {
						"type": "String"
					},
					"points": {
						"type": "String"
					},
					"turbineCollection": {
						"type": "Array"
					},
					"pointsCollection": {
						"type": "Array"
					},
					"transformedFileName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_sseApi_response')]",
				"[concat(variables('factoryId'), '/pipelines/sse-main-push-transformed-data-to-azureTable')]",
				"[concat(variables('factoryId'), '/pipelines/sse-main-foreach-location')]"
			]
		}
	]
}