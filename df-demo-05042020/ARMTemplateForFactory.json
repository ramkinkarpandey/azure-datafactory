{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-demo-05042020"
		},
		"AvanadeMachine_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AvanadeMachine'"
		},
		"AvanadeMachineFileSystem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AvanadeMachineFileSystem'"
		},
		"AvanadeMachine_OrnaginsationDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AvanadeMachine_OrnaginsationDatabase'"
		},
		"AvanadeMachine_SqlServer_Parameterised_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AvanadeMachine_SqlServer_Parameterised'"
		},
		"Azure_Sql_DfDemo_Db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Azure_Sql_DfDemo_Db'"
		},
		"DataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLakeStorage'"
		},
		"FtpLocation_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FtpLocation'"
		},
		"LinkedServiceToDataBricks_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LinkedServiceToDataBricks'"
		},
		"azure_sql_db_dfdemodatabase_employee_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_sql_db_dfdemodatabase_employee'"
		},
		"blob_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blob_linkedservice'"
		},
		"ls_datalake_csv_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalake_csv'"
		},
		"ls_function_salaryOperations_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'ls_function_salaryOperations'"
		},
		"parameterised_linked_service_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parameterised_linked_service'"
		},
		"AvanadeMachineFileSystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\CSVs"
		},
		"AvanadeMachineFileSystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "localuser"
		},
		"DataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakesv2storage.dfs.core.windows.net/"
		},
		"FtpLocation_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Temp"
		},
		"FtpLocation_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "Avanade-corp\\ram.b.pandey"
		},
		"LinkedServiceToDataBricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0922-134701-okvdwpdm"
		},
		"PdfSource_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"ls_datalake_csv_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakesv2storage.dfs.core.windows.net/"
		},
		"ls_function_salaryOperations_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://salaryoperations.azurewebsites.net"
		},
		"BlobCreation_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/fdf62bd8-f3c4-4a64-8226-d793b7659d78/resourceGroups/rg-datafactory/providers/Microsoft.Storage/storageAccounts/datalakesv2storage"
		},
		"Trigger_1hs_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"file_created_event_properties_tjx_technology_demo_parameters_triggeringFileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"file_created_event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/fdf62bd8-f3c4-4a64-8226-d793b7659d78/resourceGroups/rg-datafactory/providers/Microsoft.Storage/storageAccounts/datalakesv2storage"
		},
		"trg_OnBlobCreation_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/fdf62bd8-f3c4-4a64-8226-d793b7659d78/resourceGroups/rg-datafactory/providers/Microsoft.Storage/storageAccounts/datalakesv2storage"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CalledPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData From Blob To Database",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_datalake_csv",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqltable_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"databasename": {
										"value": "@pipeline().parameters.SourceDatabase",
										"type": "Expression"
									},
									"datatablename": {
										"value": "@pipeline().parameters.SourceTable",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get All Employees Whose Salary Is Less Than 2000",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyData From Blob To Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM EmployeeV2 WHERE Salary < 2000",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqltable_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"databasename": {
										"value": "@pipeline().parameters.SourceDatabase",
										"type": "Expression"
									},
									"datatablename": {
										"value": "@pipeline().parameters.SourceTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Through All The Salaries",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get All Employees Whose Salary Is Less Than 2000",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All Employees Whose Salary Is Less Than 2000').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Call Salary Increment Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Increment Salary",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Id": {
												"value": "@item().Id",
												"type": "Expression"
											},
											"Salary": {
												"value": "@item().Salary",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceDatabase": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datalake_csv')]",
				"[concat(variables('factoryId'), '/datasets/sqltable_dynamic')]",
				"[concat(variables('factoryId'), '/pipelines/Increment Salary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CallingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call CalledPipline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CalledPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceDatabase": "dfdemodatabase",
								"SourceTable": "EmployeeV2",
								"FileName": "Employee.csv"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CalledPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_tumbling_timeseparated_1hs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_1hs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "nytdata/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/"
							},
							{
								"name": "Destination",
								"value": "output/@{formatDateTime(pipeline().parameters.windowStart,'yy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_1hs",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_1hs",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "@{formatDateTime(pipeline().parameters.windowStart,'yy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-12T21:50:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_1hs')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_1hs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extract data from PDF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to extract data from a PDF source.",
				"activities": [
					{
						"name": "Form Recognizer - POST",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.FormRecognizerURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Ocp-Apim-Subscription-Key": {
									"value": "@pipeline().parameters.FormRecognizerKey",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@concat('{\"source\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetPDFData_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Form Recognizer - POST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "formRecognizer",
								"type": "DataFlowReference",
								"parameters": {
									"OutputFolder": {
										"value": "'@{pipeline().parameters.outputFolder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {
									"source1": {
										"linkedService": {
											"url": {
												"value": "@activity('Form Recognizer - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FormRecognizerURL": {
						"type": "string",
						"defaultValue": "https://[NAME].cognitiveservices.azure.com/formrecognizer/v2.1/layout/analyze"
					},
					"FormRecognizerKey": {
						"type": "string",
						"defaultValue": "KeyValue"
					},
					"PDF_SourceURL": {
						"type": "string",
						"defaultValue": "https://sedl.org/afterschool/toolkits/science/pdf/ast_sci_data_tables_sample.pdf"
					},
					"outputFolder": {
						"type": "string",
						"defaultValue": "myOutput"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-08T17:26:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/formRecognizer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/From-Local-AW-Product-To-DataLakeV2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Local-AW-Product-To-DataLakeV2-CSV",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *  FROM [Production].[Product]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"maxConcurrentConnections": 4
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataSet_SQLServer_AvanadeMachine",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataSet_AzureDataLakesV2_CSV",
								"type": "DatasetReference",
								"parameters": {
									"products_filename": "products-@{utcnow()}.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataSet_SQLServer_AvanadeMachine')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataSet_AzureDataLakesV2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/From-Local-FileSystem-To-Azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_MetaData_From_LocalFileSystem",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataSet_FileSystem_AvanadeMachine",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_MetaData_From_LocalFileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_MetaData_From_LocalFileSystem').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataSet_FileSystem_AvanadeMachine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Increment Salary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Increment Salary",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "IncrementSalary",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\"Id\":',string(pipeline().parameters.Id),',\"Salary\":',string(pipeline().parameters.Salary),'}'))",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_function_salaryOperations",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Id": {
						"type": "int"
					},
					"Salary": {
						"type": "float"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_function_salaryOperations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-data-based-on-condition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look For Updated Rows",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT Id, Name, DepartmentId FROM EMPLOYEE WHERE DEPARTMENTID = @{pipeline().parameters.departmentid}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Employee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Filtered Data To Destination",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Look For Updated Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM EMPLOYEE WHERE DEPARTMENTID = @{pipeline().parameters.departmentid}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Employee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_filtered_employee",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "Employee.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"departmentid": {
						"type": "int",
						"defaultValue": 3
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employee')]",
				"[concat(variables('factoryId'), '/datasets/blob_filtered_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/from-local-sql-to-azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-data-to-azure-sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get-last-synched-iid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM dbo.EMPLOYEE\nWHERE Id > @{activity('get-last-synched-iid').output.firstrow.Id}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrganisationDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_sql_organisation_db_employee_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "get-last-synched-iid",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT IsNull(Max(Id),0) AS 'Id' FROM dbo.Employee",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azure_sql_organisation_db_employee_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-12T21:50:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrganisationDatabase')]",
				"[concat(variables('factoryId'), '/datasets/azure_sql_organisation_db_employee_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master-run-newyorktaxi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Schedule",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT Year, Month FROM dbo.Schedule",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NewYorkTaxiDb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each YearMonth",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Schedule",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Schedule').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Execute Notebook Processing Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "run-newyorktaxi-notebooks-in-databricks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"month": {
												"value": "@item().Month",
												"type": "Expression"
											},
											"year": {
												"value": "@item().Year",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NewYorkTaxiDb')]",
				"[concat(variables('factoryId'), '/pipelines/run-newyorktaxi-notebooks-in-databricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/run-newyorktaxi-notebooks-in-databricks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OrchestrateTaxiServices",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Production/OrchestrateTaxiServicesWorkflow",
							"baseParameters": {
								"ProcessMonth": {
									"value": "{@pipeline().parameters.year}-{@pipeline().parameters.month}",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceToDataBricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set errorDetails",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OrchestrateTaxiServices",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorDetails",
							"value": {
								"value": "@activity('OrchestrateTaxiServices').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set successDetails",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OrchestrateTaxiServices",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "successDetails",
							"value": {
								"value": "@activity('OrchestrateTaxiServices').output",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"month": {
						"type": "string"
					},
					"year": {
						"type": "string"
					}
				},
				"variables": {
					"errorDetails": {
						"type": "String"
					},
					"successDetails": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-07T14:14:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToDataBricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tjx_technology_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "tjx_sales",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/tjx/sales",
							"baseParameters": {
								"fileName": {
									"value": "@pipeline().parameters.triggeringFileName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceToDataBricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"triggeringFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-12T22:27:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToDataBricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataSet_AzureDataLakesV2_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"products_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().products_filename",
							"type": "Expression"
						},
						"fileSystem": "advertureworks"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_1hs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_sql_db_dfdemodatabase_employee",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "DepartmentId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_sql_db_dfdemodatabase_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewYorkTaxiDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine_SqlServer_Parameterised",
					"type": "LinkedServiceReference",
					"parameters": {
						"dataBaseName": "NewYorkTaxi"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Schedule"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AvanadeMachine_SqlServer_Parameterised')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrganisationDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine_OrnaginsationDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "DepartmentId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AvanadeMachine_OrnaginsationDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataSet_FileSystem_AvanadeMachine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachineFileSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AvanadeMachineFileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataSet_SQLServer_AvanadeMachine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AvanadeMachine",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AvanadeMachine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_1hs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "nytdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_sql_organisation_db_employee_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure_Sql_DfDemo_Db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "DepartmentId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Azure_Sql_DfDemo_Db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_filtered_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake_csv",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "employee",
						"fileSystem": "genericcontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_linkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake_csv",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "employee",
						"fileSystem": "genericcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqltable_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "parameterised_linked_service",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourcedatabase": {
							"value": "@dataset().databasename",
							"type": "Expression"
						},
						"sourcetable": {
							"value": "@dataset().datatablename",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"databasename": {
						"type": "string",
						"defaultValue": "dfdemodatabaseserver"
					},
					"datatablename": {
						"type": "string",
						"defaultValue": "employee"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "DepartmentId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().datatablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/parameterised_linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AvanadeMachine')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('AvanadeMachine_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ir-to-externalcomputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-to-externalcomputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AvanadeMachineFileSystem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('AvanadeMachineFileSystem_properties_typeProperties_host')]",
					"userId": "[parameters('AvanadeMachineFileSystem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AvanadeMachineFileSystem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "ir-to-externalcomputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-to-externalcomputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AvanadeMachine_OrnaginsationDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('AvanadeMachine_OrnaginsationDatabase_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ir-to-externalcomputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-to-externalcomputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AvanadeMachine_SqlServer_Parameterised')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dataBaseName": {
						"type": "String",
						"defaultValue": "NewYorkTaxi"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('AvanadeMachine_SqlServer_Parameterised_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ir-to-externalcomputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-to-externalcomputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_Sql_DfDemo_Db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Azure_Sql_DfDemo_Db_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FtpLocation')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FtpLocation_properties_typeProperties_host')]",
					"userId": "[parameters('FtpLocation_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FtpLocation_password')]"
					}
				},
				"connectVia": {
					"referenceName": "ir-to-externalcomputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-to-externalcomputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceToDataBricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-3089211631852080.0.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LinkedServiceToDataBricks_accessToken')]"
					},
					"existingClusterId": "[parameters('LinkedServiceToDataBricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PdfSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string",
						"defaultValue": "https://form-recogniser-instance.cognitiveservices.azure.com/"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('PdfSource_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_sql_db_dfdemodatabase_employee')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azure_sql_db_dfdemodatabase_employee_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blob_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalake_csv_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalake_csv_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_function_salaryOperations')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ls_function_salaryOperations_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ls_function_salaryOperations_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterised_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"sourcedatabase": {
						"type": "string",
						"defaultValue": "dfdemodatabaseserver"
					},
					"sourcetable": {
						"type": "string",
						"defaultValue": "employee"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('parameterised_linked_service_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobCreation')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/nytdata/blobs/{year}/{month}/{date}/",
					"blobPathEndsWith": "_SUCCESS",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BlobCreation_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_ADOBE_DELTA_LOAD_DAILY_OO')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-02-27T14:35:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_ADOBE_PARALLEL_LOAD_DAILY_OO')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Runs Everyday to load data from adobe files to RDP ",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-02-20T04:30:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_DELTA_LOAD_WEEKDAY_DE')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-02-27T14:41:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								5
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_DELTA_LOAD_WEEKDAY_SG')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-03-26T12:38:00Z",
						"timeZone": "UTC",
						"schedule": {
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_PARALLEL_LOAD_DAILY_DE')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger Parallel load of LCMS Delta during Production GO LIVE",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2020-02-12T04:45:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_PARALLEL_LOAD_DAILY_NL')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-03-20T15:39:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								8
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_PARALLEL_LOAD_DAILY_SG')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-03-20T15:55:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								3
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_LCMS_PARALLEL_LOAD_DAILY_TR')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-03-20T15:57:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							],
							"weekDays": [
								"Tuesday",
								"Monday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_1hs')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyPipeline_tumbling_timeseparated_1hs",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": {
							"type": "Expression",
							"value": "[parameters('Trigger_1hs_properties_pipeline_parameters_windowStart')]"
						}
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2022-02-20T21:53:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_tumbling_timeseparated_1hs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_created_event')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline is execute as new file arrives at source.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "tjx_technology_demo",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggeringFileName": "[parameters('file_created_event_properties_tjx_technology_demo_parameters_triggeringFileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/tjx/blobs/sales/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('file_created_event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/tjx_technology_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_OnBlobCreation')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CallingPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/genericcontainer/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('trg_OnBlobCreation_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CallingPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ir-to-externalcomputer')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/formRecognizer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow takes the output from Form Recognizer and extracts the table information to a storage sink.\nThis specifically works with the Form Recognizer Layout API. You can also save the transformations as a flowlet if you would like to reuse the logic in other dataflows. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "PdfSource",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     OutputFolder as string",
						"}",
						"source(output(",
						"          body as (analyzeResult as (pageResults as (page as short, tables as (boundingBox as double[], cells as (boundingBox as double[], columnIndex as short, elements as string[], isHeader as boolean, rowIndex as short, text as string)[], columns as short, rows as short)[])[], readResults as (angle as boolean, height as short, lines as (appearance as (style as (confidence as double, name as string)), boundingBox as double[], text as string, words as (boundingBox as double[], confidence as double, text as string)[])[], page as short, unit as string, width as double)[], version as string), createdDateTime as timestamp, lastUpdatedDateTime as timestamp, status as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.analyzeResult.pageResults.tables),",
						"     mapColumn(",
						"          page = body.analyzeResult.pageResults.page,",
						"          cells = body.analyzeResult.pageResults.tables.cells,",
						"          columns = body.analyzeResult.pageResults.tables.columns,",
						"          rows = body.analyzeResult.pageResults.tables.rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten2 aggregate(groupBy(TableNum,",
						"          rowIndex),",
						"     text = replace(trim(trim(toString(collect(text)), '['),']'),'\"','')) ~> aggregate1",
						"rank1 foldDown(unroll(cells),",
						"     mapColumn(",
						"          page,",
						"          TableNum,",
						"          columnIndex = cells.columnIndex,",
						"          isHeader = cells.isHeader,",
						"          rowIndex = cells.rowIndex,",
						"          text = cells.text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten1 filter(not(isNull(cells))) ~> filter1",
						"aggregate1 aggregate(groupBy(tableNum = 'TableNumber'+toString(TableNum)),",
						"     text = replace(reduce(collect(text), '', #acc+#item+'\\n',#result),'\"','')) ~> aggregate2",
						"filter1 rank(asc(page, true),",
						"     asc(cells, true),",
						"     output(TableNum as long)) ~> rank1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {_col0_} as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: ($OutputFolder),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     rowUrlColumn:'tableNum',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          {_col0_} = text",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PdfSource')]",
				"[concat(variables('factoryId'), '/linkedServices/DataLakeStorage')]"
			]
		}
	]
}